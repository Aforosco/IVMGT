@model Invco.Models.AllAssetViewModel

@{
    Layout = User.IsInRole("Admin") ? "_LayoutPage2" : "_Layout";
}

<body class="container mt-4">
    <h2 class="text-center mb-4">Asset Management</h2>
    
    <div class="Pbtn">
        <p>
            <a asp-action="InsertAsset" class="btn btn-success">
                <i class="fas fa-plus-circle"></i> Create New
            </a>
        </p>
        <p class="d-flex justify-content-end px-2">
            <button id="exportExcel" class="btn btn-success">
                <i class="fas fa-file-excel"></i> Export to Excel
            </button>
            <button id="exportPDF" class="btn btn-danger">
                <i class="fas fa-file-pdf"></i> Export to PDF
            </button>
        </p>

    </div>
   
    

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-secondary">
                <tr>
                    @foreach (var column in new[] { "Id", "AssetName", "Asset User", "Purchasedate", "Category", "SerialNumber", "Department" })
                    {
                        string sortIcon = ViewBag.SortColumn == column ? ViewBag.IconClass : "fa-sort";
                        string nextSort = ViewBag.SortColumn == column && ViewBag.IconClass == "fa-sort-desc" ? "fa-sort-asc" : "fa-sort-desc";
                        <th>
                            <a href="@Url.Action("GetAllAssets", new { SortColumn = column, IconClass = nextSort })">
                                @column.Replace("Id", "ID").Replace("AssetName", "Asset Kind").Replace("Purchasedate", "Purchased Date")
                                <i class="fa @sortIcon"></i>
                            </a>
                        </th>
                    }
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Assets)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.AssetName</td>
                        <td>@item.AssetUser</td>
                        <td>@item.Purchasedate</td>
                        <td>@item.CategoryName</td>
                        <td>@item.SerialNumber</td>
                        <td>@item.DepartmentName</td>
                        <td>
                            <a asp-action="UpdateAssetViewModel" asp-route-id="@item.Id" class="btn btn-primary btn-sm">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a asp-action="GetAssetDetails" asp-route-id="@item.Id" class="btn btn-info btn-sm">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a asp-action="DeleteAsset" asp-route-id="@item.Id" class="delete btn btn-danger btn-sm">
                                <i class="fas fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <nav aria-label="Page navigation" class="mt-3">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="@Url.Action("GetAllAssets", new { page = Model.CurrentPage - 1 })">Previous</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" href="@Url.Action("GetAllAssets", new { page = i })">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="@Url.Action("GetAllAssets", new { page = Model.CurrentPage + 1 })">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</body>



<script>document.addEventListener('DOMContentLoaded', function () {
        setupDeleteButtons();
        setupExportPDF();
        setupExportExcel();
    });

    function setupDeleteButtons() {
        document.querySelectorAll('.delete').forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                const deleteUrl = this.getAttribute('href');
                const row = this.closest('tr');

                if (confirm("Are you sure you want to delete this item?")) {
                    fetch(deleteUrl, { method: 'POST' })
                        .then(response => {
                            if (!response.ok) throw new Error(response.statusText);
                            row.style.transition = "opacity 0.5s";
                            row.style.opacity = 0;
                            setTimeout(() => row.remove(), 500);
                            Toastify({ text: "Deleted successfully!", duration: 3000, gravity: "top", position: "right", backgroundColor: "#28a745" }).showToast();
                        })
                        .catch(error => {
                            Toastify({ text: "Error: " + error.message, duration: 3000, gravity: "top", position: "right", backgroundColor: "#dc3545" }).showToast();
                        });
                }
            });
        });
    }

    function setupExportPDF() {
        const exportPDFButton = document.getElementById('exportPDF');
        if (!exportPDFButton) return;
        exportPDFButton.addEventListener('click', function () {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const table = document.querySelector('table');
            const rows = Array.from(table.querySelectorAll('tr')).map(row =>
                Array.from(row.querySelectorAll('td, th')).map(cell => cell.innerText)
            );

            if (rows.length > 1) {
                doc.autoTable({ head: [rows[0]], body: rows.slice(1) });
                doc.save('assets.pdf');
            } else {
                alert("No data available to export.");
            }
        });
    }

    function setupExportExcel() {
        const exportExcelButton = document.getElementById('exportExcel');
        if (!exportExcelButton) return;
        exportExcelButton.addEventListener('click', function () {
            const table = document.querySelector('table');
            const wb = XLSX.utils.table_to_book(table, { sheet: "Assets" });
            XLSX.writeFile(wb, 'assets.xlsx');
        });
    }
    </script>